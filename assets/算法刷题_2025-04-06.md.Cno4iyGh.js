import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.BjG1C43O.js";const t="/Yoo-js-weekly/assets/image.DKzWBJfP.png",l="/Yoo-js-weekly/assets/image-1.s-4lOVwI.png",p="/Yoo-js-weekly/assets/image-2.xgEKXOqU.png",y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"算法刷题/2025-04-06.md","filePath":"算法刷题/2025-04-06.md"}'),h={name:"算法刷题/2025-04-06.md"};function k(d,s,o,r,c,E){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_2621-睡眠函数" tabindex="-1">2621. <a href="https://leetcode.cn/problems/sleep/description/" target="_blank" rel="noreferrer">睡眠函数</a> <a class="header-anchor" href="#_2621-睡眠函数" aria-label="Permalink to &quot;2621. [睡眠函数](https://leetcode.cn/problems/sleep/description/)&quot;">​</a></h2><p>要求是实现一个 <code>sleep</code> 函数，使得在调用 <code>sleep</code> 函数后，程序会暂停执行指定时间，并返回一个 Promise 对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">millis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve, millis);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>值得注意的是，<code>setTimeout</code> 并不是 <code>millis</code> 毫秒后执行，而是在 <code>millis</code> 毫秒后将回调函数加入事件队列中，等待事件循环执行。所以，传入的<code>millis</code> 应该理解为是 sleep 的最短时间，而不是刚好 <code>millis</code> 毫秒后执行。 <img src="`+t+`" alt="sleep"></p><h2 id="_2620-计数器" tabindex="-1">2620. <a href="https://leetcode.cn/problems/counter/description/" target="_blank" rel="noreferrer">计数器</a> <a class="header-anchor" href="#_2620-计数器" aria-label="Permalink to &quot;2620. [计数器](https://leetcode.cn/problems/counter/description/)&quot;">​</a></h2><p>给定一个整型参数 <code>n</code>，请你编写并返回一个 <code>counter</code> 函数。这个 <code>counter</code> 函数最初返回 <code>n</code>，每次调用它时会返回前一个值加 1 的值 <code>( n , n + 1 , n + 2 ，等等)</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCounter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>通过闭包来存储 <code>count</code> 的值，每次调用时返回 <code>count</code> 的值，并将 <code>count</code> 的值加 1。 闭包的形成条件： ​- 函数嵌套：内部函数定义在外部函数内(<code>counter</code> 定义在 <code>createCounter</code> 内)。</p><ul><li>​内部函数引用外部变量：内部函数使用了外部函数的局部变量或参数（<code>counter</code> 引用了外部函数的 <code>count</code> 变量）。</li><li>​内部函数被外部作用域调用：例如通过返回值将内部函数传递到外部 （<code>counter</code> 作为 <code>createCounter</code> 的执行结果被返回）。</li></ul><h2 id="_2619-数组原型对象的最后一个元素" tabindex="-1">2619 <a href="https://leetcode.cn/problems/array-prototype-last/description/" target="_blank" rel="noreferrer">数组原型对象的最后一个元素</a> <a class="header-anchor" href="#_2619-数组原型对象的最后一个元素" aria-label="Permalink to &quot;2619 [数组原型对象的最后一个元素](https://leetcode.cn/problems/array-prototype-last/description/)&quot;">​</a></h2><p>编写一段代码实现一个数组方法，使任何数组都可以调用 <code>array.last()</code> 方法，这个方法将返回数组最后一个元素。如果数组中没有元素，则返回 <code>-1</code> 。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>通过 <code>Array.prototype</code> 来扩展 <code>Array</code> 对象，使得所有的数组都可以调用 <code>last</code> 方法。</p><ol><li><p>为什么在 <code>Array.prototype</code> 上扩展方法就可以让所有的数组都可以调用？ 所有数组实例的原型链都指向 <code>Array.prototype</code><img src="`+l+'" alt="数组原型链"><code>Array.prototype</code> 是一个特殊的对象，它包含了所有数组实例所共享的属性和方法。当调用数组方法（如<code>push()</code>）时，JavaScript 引擎会优先在实例自身查找该方法，若未找到则通过 <code>[[Prototype]]</code> 向上追溯至 <code>Array.prototype</code>，所以在<code>Array.prototype</code> 上扩展的方法，使得所有数组实例都可以调用。</p></li><li><p><code>this</code> 指向的问题 在 <code>Array.prototype</code> 上扩展的方法，<code>this</code> 指向的是调用该方法的数组实例。</p></li><li><p><code>this</code> 指向的优先级判断 <img src="'+p+`" alt="this 指向的优先级判断"></p></li></ol><h2 id="_2618-检查是否是类的实例对象" tabindex="-1">2618 <a href="https://leetcode.cn/problems/check-if-object-instance-of-class/description/" target="_blank" rel="noreferrer">检查是否是类的实例对象</a> <a class="header-anchor" href="#_2618-检查是否是类的实例对象" aria-label="Permalink to &quot;2618 [检查是否是类的实例对象](https://leetcode.cn/problems/check-if-object-instance-of-class/description/)&quot;">​</a></h2><p>请你编写一个函数，检查给定的值是否是给定类或超类的实例。可以传递给函数的数据类型没有限制。例如，值或类可能是<code>undefined</code> 。 给的示例中有一个 case：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>输入：func = () =&gt; checkIfInstance(5, Number)</span></span>
<span class="line"><span>输出：true</span></span>
<span class="line"><span>解释：5 是一个 Number。注意，&quot;instanceof&quot; 关键字将返回 false。</span></span></code></pre></div><p>solution:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkIfInstanceOf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">classFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(classFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> classFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ol><li><p>为什么要判断 <code>obj</code> 和 <code>classFunction</code> 是否为 <code>null</code> 或 <code>undefined</code>？ 在 JavaScript 中，<code>null</code> 和 <code>undefined</code> 是两种特殊的值，它们分别表示空值和未定义。在进行类型检查时，我们通常需要排除这两种情况，以避免出现错误。</p></li><li><p>为什么要判断 <code>classFunction</code> 是否为 <code>Function</code> 类型？ 在 JavaScript 中，<code>Function</code> 是一个内置的构造函数，它用于创建函数对象。如果 <code>classFunction</code> 不是 <code>Function</code> 类型，那么它无法作为构造函数使用，也就无法通过 <code>new</code> 关键字创建实例对象，那<code>obj</code> 就一定不是 <code>classFunction</code> 的实例对象。</p></li></ol>`,20)]))}const F=i(h,[["render",k]]);export{y as __pageData,F as default};
